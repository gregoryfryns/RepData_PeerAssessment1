result <- dbGetQuery(connection,"show databases;")
dbDisconnect(connection)
head(result)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
?lm
lm(y~x)
lm(y~x-1)
plot(x,y,
xlab="x",
ylab="y",
bg="lightblue",
col="black",cex=1.1,pch=21,frame=FALSE)
abline(lm(y~x),lwd=2)
abline(lm(y~x-1),lwd=2)
correl <- cor(x,y)
cor(y,x)
?sqrt
?var
?sd
sd(x)
devx <- sd(x)
devy <- sd(y)
betaone <- correl*devy/devx
model <- lm(y~x)
model
mean(y) - betaone*mean(x)
n <- length(y)
e <- resid(model)
yhat <- predict(model)
y-e
summary(model)
?qt
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
?download.file
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile="./communities.Csv")
data <- read.csv("./communities.Csv",header=TRUE)
head(data)
agricultureLogical <- data[data$ACR == 3 & data$AGS == 6,]
head(data,3)
?which
agricultureLogical <- which(data[data$ACR == 3 & data$AGS == 6,])
agricultureLogical <- which(data[data$ACR == 3 & data$AGS == 6])
logicalACR <- which(data[data$ACR == 3])
logicalACR <- which(data[data$ACR == 3,])
logicalACR <- which(data[data$ACR == 3,1])
logicalACR <- data[data$ACR == 3,1]
logicalACR <- data[data$ACR == 3 & data$AGS == 6,1]
logicalACR
?with
logicalACR <- with(data[data$ACR == 3 & data$AGS == 6,])
logicalACR <- data$ACR == 3 & data$AGS == 6
head(data[,c("ACR","AGS")])
head(logicalACR)
head(data[,c("ACR","AGS")],20)
which(logicalACR)
install.package("jpg")
packages.install("jpeg")
install.packages("jpeg")
library(jpeg)
?jpeg
img <- readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",native=TRUE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",destfile="./getdataJeff.jpg")
img <- readJPEG("./getdataJeff.jpg",native=TRUE)
?download.file
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",destfile="./getdataJeff.jpg",mode="wb")
img <- readJPEG("./getdataJeff.jpg",native=TRUE)
summary(img)
head(img)
quantile(img,probs=c(0.3,0.8))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",destfile="./FGDP.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv",destfile="./fedstats.csv")
fgdp <- read.csv("./FGDP.csv",header=TRUE)
head fgdp
head(fgdp)
?read.csv
fgdp <- read.csv("./FGDP.csv",header=FALSE,blank.lines.skip=TRUE,skip=10)
head(fgdp)
names(fgdp) <- c("Country code","Ranking","Country name","millions of USD")
head(fgdp)
fgdp <- fgdp[,c(1,2,4,5)]
names(fgdp) <- c("Country code","Ranking","Country name","millions of USD")
head(fgdp)
fedstats <- read.csv("./fedstats.csv",header=TRUE,blank.lines.skip=TRUE)
head(fedstats)
merged <- merge(fgdp,fedstats,by.x="Country code",by.y="CountryCode")
?count
head(fedstats)
fedstats2 <- unique(fedstats[,1])
fgdp2 <- unique(fgdp[,"Country Code"])
fgdp2 <- unique(fgdp[,"CountryCode"])
head(fgdp)
fgdp2 <- unique(fgdp[,"Country code"])
head(fgdp2)
?merge
head(fgdp)
?sort
sort(fgdp)
sort(fgdp$Country code)
names(fgdp) <- c("CountryCode","Ranking","Country name","millions of USD")
sort(fgdp$CountryCode)
merged <- merge(fgdp,fedstats,by.x="CountryCode",by.y="CountryCode")
head(merged)
sort(merged$CountryCode)
sort(merged$Ranking)
sorted <- sort(merged$Ranking,decreasing=TRUE)
head(sorted,13)
class(merged$Ranking)
merged$Ranking <- as.numeric(levels(merged$Ranking))[merged$Ranking]
sorted <- sort(merged$Ranking,decreasing=TRUE)
head(sorted)
?order
sorted <- merged[order(merged$Ranking,decreasing=TRUE,na.last=TRUE),]
head(sorted,14)
sorted2 <- sorted[,c("CountryCode","Income","Short.Name","Ranking")]
sorted2 <- sorted[,c("CountryCode","Income.group","Short.Name","Ranking")]
sorted2 <- sorted[,c("CountryCode","Income.Group","Short.Name","Ranking")]
head(sorted2)
temp <- sorted2[,c("Income.Group","Ranking")]
tapply(Sorted2$Ranking,Sorted2$Income.Group,mean)
tapply(sorted2$Ranking,sorted2$Income.Group,mean)
tapply(merged$Ranking,merged$Income.Group,mean)
?complete.cases
temp <- complete.cases(merged)
head(temp)
temp2 <- merged[temp,]
head(temp2)
sum(temp)
head(merged)
merged <- merged[,c("Income.Group","Ranking")]
temp <- complete.cases(merged)
temp2 <- merged[temp,]
tapply(temp2$Ranking,temp2$Income.Group,mean)
head(fgdp)
complete.cases(fgdp)
sum(complete.cases.fedstats)
head(fedstats)
fedstats <- fedstats[,c("CountryCode","Income.Group")]
sum(complete.cases(fedstats))
head(fedstats)
tail(fedstats)
merged <- merge(fgdp,fedstats,by.x="CountryCode",by.y="CountryCode")
head(fgdp)
merged$Ranking <- as.numeric(levels(merged$Ranking))[merged$Ranking]
sum(complete.cases(merged))
fgdp <- read.csv("./FGDP.csv",header=TRUE)
head(fgdp)
fedstats <- read.csv("./fedstats.csv",header=TRUE,blank.lines.skip=TRUE)
fgdp <- read.csv("./FGDP.csv",header=FALSE,blank.lines.skip=TRUE,skip=10)
head(fgdp)
fgdp <- fgdp[,c(1,2,4,5)]
names(fgdp) <- c("CountryCode","Ranking","Country name","millions of USD")
head(fgdp)
fgdp <- fgdp[1:3]
head(fgdp)
summary(fgdp)
summary(fedstats)
head(fedstats)
fedstats <- fedstats[,c("CountryCode","Income.Group")]
summary(fedstats)
summary(fedstats$CountryCode)
countrycodes <- sort(fedstats$CountryCode)
head(countrycodes)
tail(countrycodes)
countrycodes <- sort(fgdp$CountryCode)
head(countrycodes)
tail(countrycodes)
sum(!is.na(fgdp$Ranking))
rank <- sort(fgdp$Ranking)
head(rank)
fgdp$Ranking <- as.numeric(levels(fgdp$Ranking))[fgdp$Ranking]
rank <- sort(fgdp$Ranking)
head(rank)
fgdp <- read.csv("./FGDP.csv",header=FALSE,blank.lines.skip=TRUE,skip=10)
fgdp <- fgdp[,c(1,2,4)]
names(fgdp) <- c("CountryCode","Ranking","Country name")
filter <- fgdp[fgdp$Ranking!=""]
filter <- fgdp$Ranking!=""
sum(filter)
?is.numeric
filter <- is.numeric(fgdp$Ranking)
sum(filter)
?is.empty
test <- as.numeric(levels(fgdp$Ranking))[fgdp$Ranking]
header(test)
head(test)
tail(test)
head(sort(test))
head(test,40)
head(test,200)
fgdp <- read.csv("./FGDP.csv",header=FALSE,blank.lines.skip=TRUE,skip=1)
fgdp <- fgdp[,c(1,2,4)]
head(fgdp)
fgdp <- read.csv("./FGDP.csv",header=FALSE,blank.lines.skip=TRUE,skip=4)
head(fgdp)
fgdp <- read.csv("./FGDP.csv",header=FALSE,blank.lines.skip=TRUE,skip=5)
head(fgdp)
fgdp <- fgdp[,c(1,2,4)]
names(fgdp) <- c("CountryCode","Ranking","Country name")
head(fgdp)
test <- as.numeric(levels(fgdp$Ranking))[fgdp$Ranking]
head(test)
head(test,191)
head(fgdp$Rankings,20)
head(fgdp)
head(fgdp,50)
fgdp <- fgdp[1:190,]
merge <- merge(fgdp,medstats,by.x="CountryCode",by.y="CountryCode")
merge <- merge(fgdp,fedstats,by.x="CountryCode",by.y="CountryCode")
sorted <- sort(merge$Ranking,decreasing=TRUE)
head(sorted)
?order
sorted <- merge[order(merge$Ranking,decreasing=TRUE),]
head(sorted)
tail(sorted)
head(sorted,13)
sorted <- merge[order(as.numeric(merge$Ranking),decreasing=TRUE),]
head(sorted,13)
head(merge)
tail(merge)
class(merge$Ranking)
class(merge$Ranking[1])
merge <- merge(fgdp,fedstats,by.x="CountryCode",by.y="CountryCode")
head(merge)
rank <- merge$Ranking
head(rank)
sort(rank)
class(rank)
as.numeric(rank)
head(rank)
head(as.numeric(rank))
sort(as.numeric(rank))
head(as.numeric(as.character(rank))
)
sort(as.numeric(as.character(rank))
)
sorted <- merge[order(as.numeric(as.character(merge$Ranking)),decreasing=TRUE),]
head(sorted)
tail(sorted)
head(sorted,13)
tapply(sorted$Ranking,sorted$Income.Group,mean)
sorted$Ranking <- as.numeric(as.character(sorted$Ranking))
head(sorted,13)
tail(sorted)
tapply(sorted$Ranking,sorted$Income.Group,mean)
?quantile
quantile(sorted$Ranking)
190-143
190/5
library(Hmisc)
groups = cut2(sorted$Ranking,g=5)
groups
table(groups)
table(groups,sorted$Income.Groups)
table(sorted$Income.Groups,groups)
?table
class(groups)
test <- cbind(sorted,groups)
head(test)
tail(test)
table(test$Income.Group,test$groups)
getwd()
?cs
?cd
?changedir
?rep
importFilter <- rep(c(1,15),561)
importFilter <- rep(c(-1,15),561)
?import.table
?load.table
?read.table
?read.fwd
testData <- read.fwf("./UCI HAR Dataset/test/X_test.txt",importFilter)
colNames <- read.table("./UCI HAR Dataset/features.txt, sep = " ")
)
"
colNames <- read.table("./UCI HAR Dataset/features.txt", sep = " ")
head(colNames)
tail(colNames)
importFilter <- rep(16,561)
class(colNames)
class(colNames$V2)
colNames <- read.table("./UCI HAR Dataset/features.txt", sep=" ",quote="",stringsAsFactors=FALSE, comment.char="",colClasses=c("integer","character"))
head(colNames)
colNames <- read.table("./UCI HAR Dataset/features.txt", sep=" ",quote="",stringsAsFactors=FALSE, comment.char="",colClasses=c("integer","character"),col.names=c("Col number","Name"))
head(colNames)
?grepl
temp <- grepl(".*mean().*",colNames$Name) | grepl(".*std().*",colNames$Name)
head(temp)
head(colNames,30)
head(colNames,20)
head(temp,20)
tail(colNames,20)
tail(temp,20)
temp <- grepl(".*mean\(\).*",colNames$Name) | grepl(".*std\(\).*",colNames$Name)
temp <- grepl(".*mean().*",colNames$Name) | grepl(".*std().*",colNames$Name)
temp <- 2*temp -1
?read.fwf
filterColumns <- grepl(".*mean().*",colNames$Name) | grepl(".*std().*",colNames$Name)
filterFwf <- 2*filterColumns -1
filterFwf <- 16*filterFwf
sum(filterColumns)
colNamesFwf <- colNames[filterColumns]
colNamesFwf <- colNames[filterColumns,]
head(colNamesFwf)
colNamesFwf <- colNames[filterColumns,2]
head(colNamesFwf)
?rep
classesFwf <- rep("numeric",sum(filterColumns))
?read.fwf
dataTest <- read.fwf("./UCI HAR Dataset/test/X_test.txt", widths=filterFwf, sep=" ",quote="",stringsAsFactors=FALSE, comment.char="",colClasses=classesFwf,col.names=colNamesFwf)
dataTest <- read.fwf("./UCI HAR Dataset/test/X_test.txt", widths=filterFwf, sep=" ",stringsAsFactors=FALSE, comment.char="",colClasses=classesFwf,col.names=colNamesFwf)
dataTest <- read.fwf("./UCI HAR Dataset/test/X_test.txt", widths=filterFwf, sep=" ",stringsAsFactors=FALSE, comment.char="",colClasses=classesFwf)
dataTest <- read.fwf("./UCI HAR Dataset/test/X_test.txt", widths=filterFwf, sep=" ",stringsAsFactors=FALSE, comment.char="",colClasses=classesFwf, ncols=10,nrows=10)
head(dataTest)
?read.table
dataTest <- read.fwf("./UCI HAR Dataset/test/X_test.txt", widths=filterFwf, sep=" ",quote="",stringsAsFactors=FALSE, comment.char="",colClasses=classesFwf,col.names=colNamesFwf,nrows=10)
dataTest <- read.fwf("./UCI HAR Dataset/test/X_test.txt", widths=filterFwf, sep=" ",stringsAsFactors=FALSE, comment.char="",colClasses=classesFwf,col.names=colNamesFwf,nrows=10)
sum(filterfwf>0)
sum(filterFwf>0)
tempfilter <- rep(c(-1,15),561)
dataTest <- read.fwf("./UCI HAR Dataset/test/X_test.txt", widths=tempfilter, sep=" ",stringsAsFactors=FALSE, comment.char="",colClasses=rep("numeric",561),col.names=colNames,nrows=10)
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
w <- c(2, 1, 3, 1)
u <- rp(.3,4)
u <- rep(.3,4)
u
sum(w*(x-u)^2)
u <- rep(1.077,4)
sum(w*(x-u)^2)
u <- rep(0.1471,4)
sum(w*(x-u)^2)
u <- rep(0.0025,4)
sum(w*(x-u)^2)
mean(x*w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
beta <- -1.713
sum((y-x*beta)^2)
beta <- 0.59915
sum((y-x*beta)^2)
beta <- -0.04462
sum((y-x*beta)^2)
beta <- 0.8263
sum((y-x*beta)^2)
beta <- 0.8265
sum((y-x*beta)^2)
beta <- 0.8270
sum((y-x*beta)^2)
beta <- 0.8254
sum((y-x*beta)^2)
data(mtcars)
mtcars
model <- lm(mtcars$mpg ~ mtcars*wt)
model <- lm(mtcars$mpg ~ mtcars$wt)
model
model <- lm(mtcars$wt ~ mtcars$mpg)
model
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
mean <- mean(x)
var(x)
var(x-mean)
x <- x-mean
x
mean(x)
var <- var(x)
x <- x/var
var(x)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
y <- (x - mean(x))/sd(x)
mean(y)
sd(y)
y
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
model <- lm(x ~ y)
model
model <- lm(y ~ x)
model
x
x <- x-mean(x)
x
y
y <- y-mean(y)
model <- lm(y ~ x)
model
model <- lm(x ~ y)
model
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
u <- 0.573
sum((x-u)^2)
u <- 0.8
sum((x-u)^2)
u <- 0.36
sum((x-u)^2)
u <- 0.44
sum((x-u)^2)
u <- 0.572
sum((x-u)^2)
u <- 0.574
sum((x-u)^2)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
head(Diet)
?Diet
?nlme
head(weight)
head(BodyWeight)
?panel.abline
?print.trellis
?trellis.par.set
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qnorm(., mean=1100, sd=75)
qnorm(.95, mean=1100, sd=75)
qnorm(.95,mean=1100,sd=56.25)
qnorm(.95,mean=1100,sd=sqrt(56.25))
?pbinom
1/8
1-0.125
?choose
8*4
1/32
ppois(10,15)
?choose
choose(4,5)
choose(3,5)
choose(5,4)
choose(5,2)
choose(6,6)
choose(6,5)
choose(6,4)
choose(2,1)
choose(1,1)
choose(1,0)
choose(5,0)
choose(5,5)
choose(5,4)
1/16
6/32
setwd("~/github/RepData_PeerAssessment1")
unzip("activity.zip")
?read.csv
read.csv("activity.zip")
data <- read.csv("activity.zip")
head(data)
data <- read.csv("activity.zip",header=TRUE,sep=",")
head(data)
data <- read.csv("activity.csv",header=TRUE,sep=",")
head(data)
class(data[,2])
?hist
?plot
sums <- aggregate(data, by=date, FUN=sum, na.rm=TRUE)
sums <- aggregate(data, by=data$date, FUN=sum, na.rm=TRUE)
sums <- aggregate(data, by=list(date), FUN=sum, na.rm=TRUE)
?list
sums <- aggregate(data, by=list(data$date), FUN=sum, na.rm=TRUE)
data <- read.csv("activity.csv"
,header=TRUE
,sep=","
,colclasses=c("numeric","character","numeric"))
?read.csv
data <- read.csv("activity.csv"
,header=TRUE
,sep=","
,colClasses=c("numeric","character","numeric"))
head(data)
sums <- aggregate(data, by=list(data$date), FUN=sum, na.rm=TRUE)
data <- read.csv("activity.csv"
,header=TRUE
,sep=","
,na.strings="NA"
,colClasses=c("numeric","character","numeric"))
head(data)
sums <- aggregate(data, by=list(data$date), FUN=sum, na.rm=TRUE)
class(data$steps)
sums <- aggregate(data, by=list(data$date), FUN="sum", na.rm=TRUE)
str(data$steps)
str(data$date)
str(data)
sums <- aggregate(data$steps ~ data$date, data, FUN="sum", na.rm=TRUE)
head(sums)
stepsbyday <- aggregate(data$steps ~ data$date, data, FUN="sum", na.rm=TRUE)
colnames(stepsbyday) <- c("date", "steps")
head(stepsbyday)
plot(stepsbyday$date ~ stepsbyday$steps)
plot(stepsbyday$steps ~ stepsbyday$date)
boxplots(stepsbyday$steps)
boxplot(stepsbyday$steps)
?plot
head(stepsbyday)
dates <- as.date(stepsbyday$date, "%Y-%m-%d")
dates <- as.Date(stepsbyday$date, "%Y-%m-%d")
